<?php
/**
 *Клиент-серверная архитектура является распространенной моделью организации взаимодействия между различными компьютерными системами. В контексте веб-приложений на PHP сценарий работы обычно выглядит следующим образом: клиент отправляет запрос на сервер, сервер обрабатывает этот запрос и возвращает клиенту соответствующий ответ.
 *
 * Когда пользователь взаимодействует с веб-сайтом, его браузер действует как клиент, отправляя HTTP-запросы на сервер в поисках определенной информации или выполнения определенных действий. Сервер в свою очередь принимает эти запросы, обрабатывает их (например, выполняет PHP-скрипты) и отправляет обратно клиенту результат в виде HTML-страницы, данных, изображений и т. д.
 *
 * Процесс взаимодействия между клиентом и сервером через HTTP запросы и ответы основан на принципе "запрос-ответ". Клиент отправляет запрос на сервер, в котором содержится необходимая информация (например, запрашиваемый URL, параметры запроса и т. д.), а сервер обрабатывает этот запрос и возвращает соответствующий ответ.
 */


/**
 * Протокол передачи гипертекста (HTTP) является основным протоколом для передачи данных в сети Интернет. Он определяет структуру сообщений, которые отправляются между клиентом и сервером. Вот основные компоненты структуры HTTP протокола:
 *
 * Заголовок (Header): Заголовок HTTP запроса или ответа содержит метаданные, необходимые для правильной обработки сообщения. Заголовок может содержать различные параметры, такие как тип содержимого, метод запроса, код состояния и другие сведения.
 * Тело (Body): Тело сообщения HTTP содержит собственно данные, которые передаются между клиентом и сервером. Эти данные могут быть в различных форматах, например, текстовом, JSON, XML, изображениях и других.
 * Форматы передачи данных: HTTP поддерживает различные форматы передачи данных, такие как:
 * Текстовый формат (например, HTML, CSS, JavaScript)
 * Структурированные форматы (например, JSON, XML)
 * Форматы для передачи файлов (например, изображения, аудио, видео)
 * Другие специализированные форматы (например, форматы для передачи данных форм, binary data и т. д.)
 * Эти компоненты вместе обеспечивают правильное взаимодействие между клиентом и сервером в сети. При отправке HTTP запроса, клиент указывает метод (GET, POST, PUT, DELETE и пр.), URL, заголовки и, при необходимости, тело с данными. Сервер в свою очередь формирует ответ, который также содержит заголовки, тело с данными и другую информацию.
 *
 * HTTP является универсальным протоколом для взаимодействия клиентов и серверов в Интернете, и его структура обеспечивает эффективную передачу различных типов данных и обеспечивает надежность и безопасность обмена информацией.
 */

/**
 * Работа с HTTP протоколом в PHP включает в себя использование функции header(), которая позволяет управлять заголовками HTTP запроса и ответа. Заголовки HTTP содержат метаинформацию о запросе или ответе, такую как тип содержимого, кодировка, куки и другие параметры. Давайте рассмотрим некоторые примеры использования функции header() в PHP:
 *
 * Установка заголовка Content-Type для возвращаемого контента:
 */
header('Content-Type: text/html; charset=utf-8');
echo "<h1>Пример работы с HTTP протоколом в PHP</h1>";


/**
 * Установка кода состояния HTTP:
 */
header('HTTP/1.1 404 Not Found');
echo "<h1>Ошибка 404: Страница не найдена</h1>";


/**
 * Редирект пользователя на другую страницу:
 */
header('Location: https://www.example.com/newpage.php');
exit;


/**
 * Установка заголовка Set-Cookie для установки куки:
 */
header('Set-Cookie: username=JohnDoe;');
echo "Куки установлены!";


/**
 * Запрет кэширования страницы браузером:
 */
header("Cache-Control: no-cache, must-revalidate");
header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
echo "<p>Страница не будет кэшироваться</p>";


$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, "wd14.local/http/curlExample.php");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$output = curl_exec($ch);