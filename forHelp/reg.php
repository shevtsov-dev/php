<?php
//Введение в регулярные выражения. Область применения
//
//
//Регулярные выражения (regular expressions) в PHP представляют собой мощный инструмент для работы с текстовыми данными. Они позволяют осуществлять поиск и манипуляции с текстом с использованием шаблонов. Область применения регулярных выражений в PHP очень широка:
//Поиск и замена текста в строках: Регулярные выражения используются для поиска конкретных паттернов в тексте и их замены на другие значения.
//Валидация данных: Регулярные выражения помогают проверять строки на соответствие определенным форматам, таким как email-адреса, телефонные номера, даты и т.д.
//Фильтрация текста: Регулярные выражения позволяют фильтровать текстовые данные, избавляясь от ненужной информации.
//Разбор структурированных данных: Регулярные выражения могут быть использованы для извлечения определенной информации из структурированных данных, таких как CSV-файлы, логи и т.д.
//Обработка веб-форм: Регулярные выражения широко применяются при обработке данных из HTML-форм, например, для валидации ввода на стороне клиента или сервера.
//Манипуляция с текстом: С их помощью можно производить различные операции над текстом, такие как выделение подстрок, разбиение текста на отдельные части, удаление определенных символов и т.д.
//Регулярные выражения в PHP предоставляют различные функции (например, preg_match, preg_replace, preg_split), которые позволяют эффективно работать с текстовыми данными в соответствии с заданными шаблонами. Понимание и использование регулярных выражений позволяет значительно упростить и ускорить обработку текстовой информации в PHP.\


//Диапазоны, квантификаторы, исключение в диапазонах
//
//
//Диапазоны в регулярных выражениях позволяют указать набор символов или цифр, которые могут находиться в определенном диапазоне значений. Например, для указания диапазона букв от 'a' до 'z' можно использовать выражение [a-z], а для диапазона цифр от '0' до '9' - [0-9].
//Квантификаторы в регулярных выражениях определяют количество повторений предшествующего элемента. Например, квантификатор + означает, что предшествующий элемент должен повторяться один или более раз, а квантификатор * указывает на ноль или более повторений.
//Исключения в диапазонах можно задать, используя символ ^ внутри квадратных скобок. Например, [^0-9] будет соответствовать любому символу, кроме цифр от 0 до 9.
//Примеры использования диапазонов, квантификаторов и исключений в регулярных выражениях:
//[a-zA-Z] - диапазон букв от 'a' до 'z' в нижнем регистре и от 'A' до 'Z' в верхнем регистре.
//[0-5] - диапазон цифр от 0 до 5.
//\d{2,4} - два, три или четыре цифры подряд.
//[^aeiou] - любой символ, кроме гласных букв.
//Используйте эти элементы регулярных выражений совместно, чтобы более точно указывать требуемые шаблоны для поиска и модификации текстовой информации в PHP.


//Якоря, модификаторы, условия (подмаски в регулярных выражениях), группировка и группы
//
//
//Якоря в регулярных выражениях используются для указания определенного места в строке, где должен соответствовать поиск. Например, символ ^ указывает на начало строки, а $ - на конец строки.
//Модификаторы в регулярных выражениях предоставляют дополнительные возможности и опции для поиска и замены текста. Например, модификатор i позволяет делать поиск без учета регистра символов, а модификатор m делает возможным работу с многострочными текстами.
//Условия и подмаски позволяют создавать более сложные проверки и извлечения информации из текста. Например, можно использовать условия для проверки наличия определенного паттерна в тексте перед другим выражением. Подмаски используются для извлечения определенных частей текста, соответствующих заданным шаблонам.
//Группировка в регулярных выражениях позволяет объединять части выражения в логические группы. Группы можно использовать для применения квантификаторов ко всей группе, а также для извлечения данных в подмасках.
//Пример использования группировки и подмасок в регулярных выражениях:
$string = 'user@example.com';
$pattern = '/([a-zA-Z]+)@([a-zA-Z]+)\.com/';
preg_match($pattern, $string, $matches);

$username = $matches[1];
$domain = $matches[2];

echo "Username: $username, Domain: $domain";

//Жадный и не жадный поиск
//
//
//Жадный и не жадный поиск относится к способу работы квантификаторов в регулярных выражениях. Давайте разберем это понятие более подробно.
//Жадный поиск:
//Квантификаторы по умолчанию являются жадными. Это означает, что они пытаются захватить максимально возможное количество символов, удовлетворяющих шаблону, после чего начинают "отдавать" символы назад, чтобы соответствовать оставшейся части шаблона.
//Например, если у вас есть строка "abcde", и задано регулярное выражение /ab.*/, которое должно захватить всю строку после "ab", жадный поиск захватит всю строку "abcde".
//
//Не жадный поиск:
//Чтобы изменить жадность квантификатора, используется после квантификатора знак вопроса '?'. Это делает квантификатор не жадным, и он будет стараться захватить минимально возможное количество символов, удовлетворяющих шаблону.
//Не жадный поиск полезен, когда нужно захватить минимальное количество символов до встречи следующего шаблона.
//Например, в строке "abcde" при использовании не жадного поиска с регулярным выражением /ab.*?/, которое должно захватить минимальное количество символов после "ab", будет захвачен только "abc".
$text = "asdqgabcdeadsfasdfasdf";
preg_match('/ab.*?/', $text, $matches);

echo $matches[0]; // Результат: "ab"

//В PHP для работы с регулярными выражениями применяются функции из расширения PCRE (Perl Compatible Regular Expressions). Вот некоторые основные функции для работы с регулярками в PHP:
//
//preg_match(): Эта функция выполняет проверку регулярного выражения на соответствие в строке. Она вернет true, если найдено соответствие, иначе false.
//preg_match_all(): Эта функция ищет все вхождения регулярного выражения в строке и возвращает все найденные совпадения в виде массива.
//preg_replace(): Эта функция выполняет замену совпадающих с регулярным выражением подстрок в строке на указанные значения.
//preg_split(): Эта функция разделяет строку на подстроки с помощью регулярного выражения и возвращает массив подстрок.
//preg_quote(): Эта функция экранирует специальные символы регулярных выражений в строке, чтобы можно было искать их как обычные символы.
//preg_grep(): Эта функция фильтрует массив с использованием регулярного выражения и возвращает только те элементы, которые соответствуют шаблону.
//preg_filter(): Эта функция заменяет элементы массива, соответствующие регулярному выражению, на указанное значение.
//preg_match_callback(): Эта функция позволяет указать callback-функцию для обработки найденных совпадений в регулярном выражении.
//Пример использования функции preg_match() для проверки наличия слова "apple" в строке:
//

$string = "I like apples";
if(preg_match('/apple/', $string)){
    echo "Слово 'apple' найдено в строке.";
} else {
    echo "Слово 'apple' не найдено в строке.";
}
//Это лишь небольшой обзор функций для работы с регулярными выражениями в PHP. PHP предоставляет мощные инструменты для работы с текстовыми данными с помощью регулярных выражений.

$regexp = '/^\s?(\+\s?7|8)([- ()]*\d){10}$/';

// Правильные
$correctNumbers = [
    '84951234567',  '+74951234567', '8-495-1-234-567',
    ' 8 (8122) 56-56-56', '8-911-1234567', '8 (911) 12 345 67',
    '8-911 12 345 67', '8 (911) - 123 - 45 - 67', '+ 7 999 123 4567',
    '8 ( 999 ) 1234567', '8 999 123 4567'
];

// Неправильные:
$incorrectNumbers = [
    '02', '84951234567 позвать люсю', '849512345', '849512345678',
    '8 (409) 123-123-123', '7900123467', '5005005001', '8888-8888-88',
    '84951a234567', '8495123456a', '+1 234 5678901', '+8 234 5678901',
    '7 234 5678901'
];


// Проверяем правильные номера
foreach ($correctNumbers as $key)
{
    if (preg_match($regexp, $key))
    {
        echo $key."\n";
    }
}